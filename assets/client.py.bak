#!/usr/bin/env python3
"""
Robust RemotelyPy Client

This is a more robust implementation of the RemotelyPy client that can better
handle unresponsive controllers and network issues.
"""

import socket
import json
import ssl
import time
import sys
import os
import uuid
import platform
import threading
import logging
import readline
import signal
from typing import Dict, Any, Optional, Callable, List, Tuple

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('remotelypy-client')

class RobustRemotelyPyClient:
    """A more robust implementation of the RemotelyPy client."""
    
    def __init__(
        self, 
        server_host: str, 
        server_port: int, 
        use_ssl: bool = False,
        ssl_cert: Optional[str] = None,
        auth_token: Optional[str] = None,
        socket_timeout: int = 60,
        command_timeout: int = 120
    ):
        self.server_host = server_host
        self.server_port = server_port
        self.use_ssl = use_ssl
        self.ssl_cert = ssl_cert
        self.auth_token = auth_token
        self.socket_timeout = socket_timeout
        self.command_timeout = command_timeout
        
        self.socket = None
        self.is_connected = False
        self.is_running = False
        self.client_id = str(uuid.uuid4())
        self.pending_commands = {}  # command_id -> callback
        self.command_results = {}   # command_id -> result
        self.command_events = {}    # command_id -> threading.Event
        self.receive_thread = None
        self.reconnect_thread = None
        self.last_activity = time.time()
        self.reconnect_interval = 5  # seconds
        self.max_reconnect_attempts = 10
        self.current_reconnect_attempt = 0
        self.lock = threading.Lock()
        
        # For command history
        self.command_history = []
        self.current_working_directory = "~"
        
        # Resolve hostname to IP address
        try:
            self.server_ip = socket.gethostbyname(server_host)
        except socket.gaierror:
            self.server_ip = server_host  # Use as-is if resolution fails
    
    def connect(self) -> bool:
        """Connect to the controller server."""
        logger.info(f"Attempting to connect to {self.server_host}:{self.server_port}")
        
        try:
            # Create a new socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.socket_timeout)
            
            # Apply SSL if configured
            if self.use_ssl:
                context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
                if self.ssl_cert:
                    context.load_verify_locations(self.ssl_cert)
                else:
                    context.check_hostname = False
                    context.verify_mode = ssl.CERT_NONE
                sock = context.wrap_socket(sock, server_hostname=self.server_host)
            
            # Connect using the resolved IP address
            sock.connect((self.server_ip, self.server_port))
            self.socket = sock
            self.is_connected = True
            self.last_activity = time.time()
            
            # Register with the controller
            if not self._register():
                logger.error("Failed to register with controller")
                self.disconnect()
                return False
            
            # Start the receive thread
            self.is_running = True
            self.receive_thread = threading.Thread(target=self._receive_loop)
            self.receive_thread.daemon = True
            self.receive_thread.start()
            
            logger.info(f"Connected to controller at {self.server_host}:{self.server_port}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to connect: {str(e)}")
            self.is_connected = False
            return False
    
    def disconnect(self) -> None:
        """Disconnect from the controller server."""
        self.is_running = False
        self.is_connected = False
        
        if self.socket:
            try:
                self.socket.close()
            except Exception:
                pass
            self.socket = None
        
        logger.info("Disconnected from controller")
    
    def _register(self) -> bool:
        """Register with the controller."""
        system_info = {
            "hostname": socket.gethostname(),
            "platform": platform.system(),
            "platform_version": platform.version(),
            "python_version": sys.version,
            "client_id": self.client_id,
            "ip_address": self._get_local_ip()
        }
        
        # Send registration message
        if not self._send_message({
            "type": "registration",
            "system_info": system_info,
            "auth_token": self.auth_token
        }):
            return False
        
        # Wait for acknowledgment (this might be implicit in the protocol)
        # For robustness, we'll just wait a moment
        time.sleep(1)
        return True
    
    def _get_local_ip(self) -> str:
        """Get the local IP address."""
        try:
            # Create a temporary socket to determine the local IP address
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect((self.server_ip, self.server_port))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except Exception:
            return "127.0.0.1"
    
    def _send_message(self, message: Dict[str, Any]) -> bool:
        """Send a message to the controller."""
        if not self.is_connected or not self.socket:
            logger.error("Cannot send message: not connected")
            return False
        
        try:
            with self.lock:
                data = json.dumps(message).encode('utf-8') + b'\n'
                self.socket.sendall(data)
                self.last_activity = time.time()
                return True
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")
            self._handle_connection_error()
            return False
    
    def _receive_loop(self) -> None:
        """Continuously receive and process messages from the controller."""
        buffer = b''
        
        while self.is_running and self.is_connected:
            try:
                # Set socket timeout
                if self.socket:
                    self.socket.settimeout(self.socket_timeout)
                else:
                    break
                
                # Receive data
                chunk = self.socket.recv(4096)
                if not chunk:
                    logger.info("Connection closed by server")
                    self._handle_connection_error()
                    break
                
                self.last_activity = time.time()
                buffer += chunk
                
                # Process complete messages
                while b'\n' in buffer:
                    try:
                        message_data, buffer = buffer.split(b'\n', 1)
                        message = json.loads(message_data.decode('utf-8'))
                        self._process_message(message)
                    except json.JSONDecodeError as e:
                        logger.error(f"Failed to parse message as JSON: {str(e)}")
                        buffer = b''  # Clear buffer on error
                    except Exception as e:
                        logger.error(f"Error processing message: {str(e)}")
                
            except socket.timeout:
                # Send ping on timeout to check connection
                if not self._send_ping():
                    self._handle_connection_error()
                    break
            except Exception as e:
                logger.error(f"Error in receive loop: {str(e)}")
                self._handle_connection_error()
                break
        
        logger.debug("Receive loop terminated")
    
    def _process_message(self, message: Dict[str, Any]) -> None:
        """Process a received message."""
        message_type = message.get('type', 'unknown')
        
        if message_type == 'pong':
            # Pong received, connection is still alive
            pass
        
        elif message_type == 'command_result':
            # Command result received
            command_id = message.get('command_id', 'unknown')
            result = message.get('result', {})
            
            with self.lock:
                # Store the result
                self.command_results[command_id] = result
                
                # Notify any waiting threads
                if command_id in self.command_events:
                    self.command_events[command_id].set()
                
                # Call the callback if registered
                if command_id in self.pending_commands and self.pending_commands[command_id]:
                    try:
                        self.pending_commands[command_id](result)
                    except Exception as e:
                        logger.error(f"Error in command callback: {str(e)}")
                    
                    # Clean up
                    del self.pending_commands[command_id]
        
        elif message_type == 'command_request':
            # Command request from controller
            command_id = message.get('command_id', 'unknown')
            command = message.get('command', '')
            
            # Execute the command locally
            result = self._execute_local_command(command)
            
            # Send the result back
            self._send_message({
                "type": "command_response",
                "command_id": command_id,
                "result": result
            })
        
        elif message_type == 'error':
            # Error message from controller
            error = message.get('error', 'Unknown error')
            logger.error(f"Error from controller: {error}")
        
        else:
            logger.warning(f"Unknown message type: {message_type}")
    
    def _execute_local_command(self, command: str) -> Dict[str, Any]:
        """Execute a command locally."""
        import subprocess
        
        try:
            # Handle cd command specially
            if command.strip().startswith('cd '):
                new_dir = command.strip()[3:]
                try:
                    os.chdir(os.path.expanduser(new_dir))
                    return {
                        "status": "success",
                        "exit_code": 0,
                        "stdout": f"Changed directory to {os.getcwd()}",
                        "stderr": "",
                        "cwd": os.getcwd()
                    }
                except Exception as e:
                    return {
                        "status": "error",
                        "error": str(e),
                        "cwd": os.getcwd()
                    }
            
            # Execute other commands
            result = subprocess.run(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=self.command_timeout
            )
            
            return {
                "status": "success",
                "exit_code": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "cwd": os.getcwd()
            }
        except subprocess.TimeoutExpired:
            return {
                "status": "error",
                "error": f"Command timed out after {self.command_timeout} seconds",
                "cwd": os.getcwd()
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "cwd": os.getcwd()
            }
    
    def _send_ping(self) -> bool:
        """Send a ping message to check connection."""
        return self._send_message({
            "type": "ping",
            "timestamp": time.time()
        })
    
    def _handle_connection_error(self) -> None:
        """Handle connection errors by attempting to reconnect."""
        if not self.is_running:
            return
        
        self.is_connected = False
        
        if self.socket:
            try:
                self.socket.close()
            except Exception:
                pass
            self.socket = None
        
        # Start reconnect thread if not already running
        if not self.reconnect_thread or not self.reconnect_thread.is_alive():
            self.reconnect_thread = threading.Thread(target=self._reconnect_loop)
            self.reconnect_thread.daemon = True
            self.reconnect_thread.start()
    
    def _reconnect_loop(self) -> None:
        """Attempt to reconnect to the controller."""
        self.current_reconnect_attempt = 0
        
        while self.is_running and not self.is_connected and self.current_reconnect_attempt < self.max_reconnect_attempts:
            self.current_reconnect_attempt += 1
            logger.info(f"Reconnect attempt {self.current_reconnect_attempt}/{self.max_reconnect_attempts}")
            
            if self.connect():
                logger.info("Reconnected successfully")
                self.current_reconnect_attempt = 0
                return
            
            # Wait before next attempt
            time.sleep(self.reconnect_interval)
        
        if not self.is_connected:
            logger.error("Failed to reconnect after maximum attempts")
    
    def execute_command(self, command: str, callback: Optional[Callable] = None, timeout: Optional[int] = None) -> Optional[Dict[str, Any]]:
        """
        Execute a command on the controller.
        
        Args:
            command: The command to execute
            callback: Optional callback function to call with the result
            timeout: Optional timeout in seconds (defaults to self.command_timeout)
            
        Returns:
            Command result dictionary or None if timed out or error
        """
        if not self.is_connected:
            logger.error("Cannot execute command: not connected")
            return None
        
        command_id = str(uuid.uuid4())
        event = threading.Event()
        
        with self.lock:
            self.pending_commands[command_id] = callback
            self.command_events[command_id] = event
        
        # Send the command request
        if not self._send_message({
            "type": "command_request",
            "command_id": command_id,
            "command": command
        }):
            logger.error("Failed to send command request")
            
            with self.lock:
                if command_id in self.pending_commands:
                    del self.pending_commands[command_id]
                if command_id in self.command_events:
                    del self.command_events[command_id]
            
            return None
        
        # Wait for the result with timeout
        timeout = timeout or self.command_timeout
        if not event.wait(timeout):
            logger.warning(f"Command timed out after {timeout} seconds")
            
            with self.lock:
                if command_id in self.pending_commands:
                    del self.pending_commands[command_id]
                if command_id in self.command_events:
                    del self.command_events[command_id]
            
            return {
                "status": "error",
                "error": f"Command timed out after {timeout} seconds",
                "cwd": self.current_working_directory
            }
        
        # Get the result
        with self.lock:
            result = self.command_results.get(command_id)
            
            # Clean up
            if command_id in self.command_results:
                del self.command_results[command_id]
            if command_id in self.command_events:
                del self.command_events[command_id]
            if command_id in self.pending_commands and not callback:
                del self.pending_commands[command_id]
        
        # Update current working directory if provided
        if result and "cwd" in result:
            self.current_working_directory = result["cwd"]
        
        return result
    
    def run_interactive(self) -> None:
        """Run an interactive shell."""
        print("\nRemotelyPy Client - Connected to controller")
        print("Commands will be executed on the remote server.")
        print("Type '/local <command>' to execute a command locally.")
        print("Type '/quit' to exit.\n")
        
        # Set up signal handler for clean exit
        def signal_handler(sig, frame):
            print("\nExiting...")
            self.is_running = False
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        
        while self.is_running:
            try:
                # Display prompt
                prompt = f"\n┌──(remote:{os.getenv('USER')}@{self.server_host})-[{self.current_working_directory}]\n└─$ "
                user_input = input(prompt)
                
                if not user_input.strip():
                    continue
                
                # Add to history
                self.command_history.append(user_input)
                
                # Process special commands
                if user_input.strip() == '/quit':
                    print("Exiting...")
                    break
                
                elif user_input.strip().startswith('/local '):
                    # Execute locally
                    local_command = user_input.strip()[7:]
                    result = self._execute_local_command(local_command)
                    
                    if result["status"] == "success":
                        if result["stdout"]:
                            print(result["stdout"], end="")
                        if result["stderr"]:
                            print(result["stderr"], end="")
                    else:
                        print(f"Error: {result.get('error', 'Unknown error')}")
                
                else:
                    # Execute on controller
                    print("Executing command on remote server...")
                    result = self.execute_command(user_input)
                    
                    if not result:
                        print("Command failed - no response received")
                        continue
                    
                    if result["status"] == "success":
                        if result.get("stdout"):
                            print(result["stdout"], end="")
                        if result.get("stderr"):
                            print(result["stderr"], end="")
                        
                        # Update working directory
                        if "cwd" in result:
                            self.current_working_directory = result["cwd"]
                    else:
                        print(f"Error: {result.get('error', 'Unknown error')}")
            
            except KeyboardInterrupt:
                print("\nOperation cancelled")
            except EOFError:
                print("\nExiting...")
                break
            except Exception as e:
                print(f"Error: {str(e)}")
        
        self.disconnect()

def main():
    """Main entry point for the robust client."""
    import argparse
    
    parser = argparse.ArgumentParser(description="RemotelyPy Robust Client")
    parser.add_argument("--host", required=True, help="Controller server hostname or IP")
    parser.add_argument("--port", type=int, default=5555, help="Controller server port")
    parser.add_argument("--ssl", action="store_true", help="Use SSL encryption")
    parser.add_argument("--cert", help="Path to SSL certificate for verification")
    parser.add_argument("--auth", help="Authentication token")
    parser.add_argument("--socket-timeout", type=int, default=60, help="Socket timeout in seconds")
    parser.add_argument("--command-timeout", type=int, default=120, help="Command timeout in seconds")
    parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"], 
                        help="Logging level")
    
    args = parser.parse_args()
    
    # Set the logging level
    logging.getLogger().setLevel(getattr(logging, args.log_level))
    
    # Create and start the client
    client = RobustRemotelyPyClient(
        server_host=args.host,
        server_port=args.port,
        use_ssl=args.ssl,
        ssl_cert=args.cert,
        auth_token=args.auth,
        socket_timeout=args.socket_timeout,
        command_timeout=args.command_timeout
    )
    
    if client.connect():
        try:
            client.run_interactive()
        except KeyboardInterrupt:
            print("\nExiting...")
        finally:
            client.disconnect()
    else:
        print("Failed to connect to controller")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())